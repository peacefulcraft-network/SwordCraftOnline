package net.peacefulcraft.sco.inventories;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

import de.tr7zw.nbtapi.NBTItem;
import net.peacefulcraft.sco.gamehandle.player.SCOPlayer;
import net.peacefulcraft.sco.items.CustomDataHolder;
import net.peacefulcraft.sco.items.ItemIdentifier;
import net.peacefulcraft.sco.items.ItemTier;

public interface SCOInventory {
  
  public boolean isInventory(Inventory inventory);

  /**
   * Open the Inventory to the specified player.
   * Notifies the InventoryWatcher of the action.
   * @param s The Player for which to open the Inventory
   */
  public void openInventory(SCOPlayer s);

  /**
   * Close the Inventory if open.
   * The onInventoryClose event will still fire.
   */
  public void closeInventory();

  /**
   * Generate a list of ItemIdifentifiers that represent all the items in the inventory. List indexes
   * are expected to match the item locations in the inventory.
   * @return A list containing the ItemIdeifiers of all items in the inventory, and null values. 
   */
  public List<ItemIdentifier> generateItemIdentifiers();

  /**
   * Called when the user clicks in this inventory (the inventory that implements this interface).
   * @param InventoryClickEvent e: The InventoryClickEvent that was generated by the player's action
   */
  public abstract void onClickThisInventory(InventoryClickEvent ev);

  /**
   * Called when the user in the other inventory open on their screen (if applicable).
   * @param InventoryClickEvent e: The InventoryClickEvent that was generated by the player's action
   */
  public abstract void onClickThatInventory(InventoryClickEvent ev);
  
  /**
   * Called when the drags items in this inventory (the inventory that implements this interface).
   * @param InventoryClickEvent e: The InventoryClickEvent that was generated by the player's action
   */
  public abstract void onThisInventoryDrag(InventoryDragEvent ev);

  /**
   * Called when the user drags items in the other inventory open on their screen (if applicable).
   * @param InventoryClickEvent e: The InventoryClickEvent that was generated by the player's action
   */
  public abstract void onThatInventoryDrag(InventoryDragEvent ev);

  /**
   * Called when this inventories' view instance is closed.
   * @param ev The coresponding InvnetoryCloseEvent
   */
  public abstract void onInventoryClose(InventoryCloseEvent ev);

  /**
   * Generates a List of Air items
   * @param size Number of items to generate (%9=0)
   * @return The list of air items
   */
  public static List<ItemIdentifier> generateEmptyIdentifierList(int size) {
    size = (size % 9) * 9;
    List<ItemIdentifier> items = new ArrayList<ItemIdentifier>(size);
    ItemIdentifier air = ItemIdentifier.generateIdentifier("Air", ItemTier.COMMON, 1);
    for(int i=0; i<size; i++) {
      items.add(air);
    }
    return items;
  }

  /**
   * Generate a List of ItemIdentifiers from the contents of the given inventory
   * @param inventory Inventory from which to generate item identifiers
   * @return A list of ItemIdentifires for the contents of the inventory
   */
  public static List<ItemIdentifier> generateItemIdentifiers(Inventory inventory) {
    ArrayList<ItemIdentifier> items = new ArrayList<ItemIdentifier>();
    for(int i=0; i<inventory.getSize(); i++) {
      if (inventory.getItem(i) == null) {
        items.add(ItemIdentifier.generateIdentifier("Air", ItemTier.COMMON, 1));
      } else {
        ItemStack item = inventory.getItem(i);
        NBTItem nbti = new NBTItem(item);
        items.add(ItemIdentifier.generateIdentifier(
          nbti.getString("identifier"),
          ItemTier.valueOf(nbti.getString("tier").toUpperCase()),
          item.getAmount())
        );

        if (items.get(i) instanceof CustomDataHolder) {
          ((CustomDataHolder) items.get(i)).parseCustomItemData(item);
        }
      }
    }

    return items;
  }
}
